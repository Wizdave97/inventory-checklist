{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","store/actions/inventoryActions.js","../node_modules/form-serialize/index.js","containers/AddInventory/AddInventory.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1__","_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1___default","spinner","a","createElement","className","classes","Loader","module","exports","load2","d","__webpack_exports__","addInventoryComplete","updateInventoryComplete","addInventory","updateInventory","increaseQuantity","increaseQuantityAsync","decreaseQuantityAsync","decreaseQuantity","fetchInventory","deleteInventory","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","addInventorySync","type","fetchInventorySync","value","arguments","length","undefined","actionTypes","updateInventorySync","data","idToken","dispatch","url","concat","fetch","method","body","JSON","stringify","then","response","json","catch","err","id","quantity","Number","userId","queryParams","inventory","Object","entries","deleteInventorySync","k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","key","match","hash_assign","keys","shift","between","Array","isArray","push","_values","string","index","isNaN","children","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","form","options","hash","serializer","elements","radio_store","create","i","element","disabled","name","test","nodeName","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice","units","categories","AddInventory","state","unit","category","handleUnitChange","event","_this","setState","target","handleCategoryChange","submitHandler","preventDefault","document","getElementById","inventoryData","formSerialize","C_Users_Wizdave_udacity_git_course_React_inventory_checklist_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","props","auth","localId","onSubmitForm","this","addInventorySuccess","onAddInventoryComplete","history","_this2","formDisplay","react__WEBPACK_IMPORTED_MODULE_6___default","Fragment","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","variant","gutterBottom","color","align","action","root","onSubmit","required","textField","label","placeholder","fullWidth","margin","select","SelectProps","MenuProps","menu","helperText","onChange","map","button","size","form_data","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","addInventoryFail","item","xs","sm","square","Component","connect","actions","withStyles","theme","width","display","flexWrap","padding","boxSizing","marginRight","spacing","marginLeft","marginBottom"],"mappings":"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","file":"static/js/3.b39a1531.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__Kn1Z5\",\"load2\":\"Spinner_load2__otO50\"};","import * as actionTypes from './actionTypes';\r\nexport const addInventorySync = (type) =>{\r\n  return {\r\n    type:type\r\n  }\r\n}\r\nexport const fetchInventorySync = (type,value=null) =>{\r\n  return {\r\n    type:type,\r\n    value:value\r\n  }\r\n}\r\nexport const addInventoryComplete =()=>{\r\n  return {\r\n    type:actionTypes.ADD_INVENTORY_COMPLETE\r\n  }\r\n}\r\nexport const updateInventorySync = (type) =>{\r\n  return {\r\n    type:type\r\n  }\r\n}\r\nexport const updateInventoryComplete =()=>{\r\n  return {\r\n    type:actionTypes.UPDATE_INVENTORY_COMPLETE\r\n  }\r\n}\r\nexport const addInventory = (data,idToken)=>{\r\n  return dispatch =>{\r\n    dispatch(addInventorySync(actionTypes.ADD_INVENTORY))\r\n    let url=`https://soup-kitchen-8a966.firebaseio.com/inventory.json?auth=${idToken}`\r\n    fetch(url,{method:'POST',body:JSON.stringify(data)}).then(response=>{\r\n      return response.json()\r\n    }).then(response=>{\r\n      dispatch(addInventorySync(actionTypes.ADD_INVENTORY_SUCCESS))\r\n    }).catch(err=>{\r\n      dispatch(addInventorySync(actionTypes.ADD_INVENTORY_FAIL))\r\n    })\r\n  }\r\n}\r\nexport const updateInventory = (data,idToken,id)=>{\r\n  return dispatch =>{\r\n    dispatch(updateInventorySync(actionTypes.UPDATE_INVENTORY))\r\n    let url=`https://soup-kitchen-8a966.firebaseio.com/inventory/${id}.json?auth=${idToken}`\r\n    fetch(url,{method:'PATCH',body:JSON.stringify(data)}).then(response=>{\r\n      return response.json()\r\n    }).then(response=>{\r\n      dispatch(updateInventorySync(actionTypes.UPDATE_INVENTORY_SUCCESS))\r\n    }).catch(err=>{\r\n      dispatch(updateInventorySync(actionTypes.UPDATE_INVENTORY_FAIL))\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport const increaseQuantity = (type,id) =>{\r\n  return {\r\n    type:type,\r\n    value:id\r\n  }\r\n}\r\nexport const increaseQuantityAsync= (id,idToken,quantity)=>{\r\n  quantity=Number(quantity)\r\n  return dispatch=>{\r\n    let url =`https://soup-kitchen-8a966.firebaseio.com/inventory/${id}/.json?auth=${idToken}`\r\n    fetch(url,{\r\n      method:'PATCH',\r\n      body:JSON.stringify({quantity:quantity})\r\n    }).then(response=>{\r\n      //console.log(response)\r\n    }).catch(err=>{\r\n      dispatch(increaseQuantity(actionTypes.INCREASE_QUANTITY_FAIL,id))\r\n    })\r\n  }\r\n}\r\n\r\nexport const decreaseQuantityAsync= (id,idToken,quantity)=>{\r\n  quantity=Number(quantity)\r\n  return dispatch=>{\r\n    let url =`https://soup-kitchen-8a966.firebaseio.com/inventory/${id}/.json?auth=${idToken}`\r\n    fetch(url,{\r\n      method:'PATCH',\r\n      body:JSON.stringify({quantity:quantity})\r\n    }).then(response=>{\r\n      //console.log(response)\r\n    }).catch(err=>{\r\n      dispatch(increaseQuantity(actionTypes.INCREASE_QUANTITY_FAIL,id))\r\n    })\r\n  }\r\n}\r\n\r\nexport const decreaseQuantity = (type,id) =>{\r\n  return {\r\n    type:type,\r\n    value:id\r\n  }\r\n}\r\nexport const fetchInventory=(idToken,userId)=>{\r\n  return dispatch=>{\r\n    dispatch(fetchInventorySync(actionTypes.FETCH_INVENTORY))\r\n    let queryParams=`?auth=${idToken}&orderBy=\"userId\"&equalTo=\"${userId}\"`;\r\n    let url=`https://soup-kitchen-8a966.firebaseio.com/inventory.json${queryParams}`;\r\n    fetch(url).then(response=> response.json()).then(response=>{\r\n      let inventory=Object.entries(response)\r\n      dispatch(fetchInventorySync(actionTypes.FETCH_INVENTORY_SUCCESS, inventory))\r\n    }).catch(err=> dispatch(fetchInventorySync(actionTypes.FETCH_INVENTORY_FAIL)))\r\n  }\r\n}\r\n\r\nexport const deleteInventorySync= (type,id)=>{\r\n  return{\r\n    type:type,\r\n    value:id\r\n  }\r\n}\r\n\r\nexport const deleteInventory =(id,idToken)=>{\r\n  return dispatch =>{\r\n    let url =`https://soup-kitchen-8a966.firebaseio.com/inventory/${id}.json?auth=${idToken}`;\r\n    fetch(url,{\r\n      method:'DELETE'\r\n    }).then(response=>{\r\n      dispatch(deleteInventorySync(actionTypes.DELETE_INVENTORY,id))\r\n      //console.log(response)\r\n    }).catch(err=>{\r\n      dispatch(deleteInventorySync(actionTypes.DELETE_INVENTORY_FAIL,id))\r\n    })\r\n  }\r\n}\r\n","// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i; // node names which could be successful controls\n\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i; // Matches bracket notation.\n\nvar brackets = /(\\[[^\\[\\]]*\\])/g; // serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\n\nfunction serialize(form, options) {\n  if (typeof options != 'object') {\n    options = {\n      hash: !!options\n    };\n  } else if (options.hash === undefined) {\n    options.hash = true;\n  }\n\n  var result = options.hash ? {} : '';\n  var serializer = options.serializer || (options.hash ? hash_serializer : str_serialize);\n  var elements = form && form.elements ? form.elements : []; //Object store each radio and set if it's empty or not\n\n  var radio_store = Object.create(null);\n\n  for (var i = 0; i < elements.length; ++i) {\n    var element = elements[i]; // ingore disabled fields\n\n    if (!options.disabled && element.disabled || !element.name) {\n      continue;\n    } // ignore anyhting that is not considered a success field\n\n\n    if (!k_r_success_contrls.test(element.nodeName) || k_r_submitter.test(element.type)) {\n      continue;\n    }\n\n    var key = element.name;\n    var val = element.value; // we can't just use element.value for checkboxes cause some browsers lie to us\n    // they say \"on\" for value when the box isn't checked\n\n    if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n      val = undefined;\n    } // If we want empty elements\n\n\n    if (options.empty) {\n      // for checkbox\n      if (element.type === 'checkbox' && !element.checked) {\n        val = '';\n      } // for radio\n\n\n      if (element.type === 'radio') {\n        if (!radio_store[element.name] && !element.checked) {\n          radio_store[element.name] = false;\n        } else if (element.checked) {\n          radio_store[element.name] = true;\n        }\n      } // if options empty is true, continue only if its radio\n\n\n      if (val == undefined && element.type == 'radio') {\n        continue;\n      }\n    } else {\n      // value-less fields are ignored unless options.empty is true\n      if (!val) {\n        continue;\n      }\n    } // multi select boxes\n\n\n    if (element.type === 'select-multiple') {\n      val = [];\n      var selectOptions = element.options;\n      var isSelectedOptions = false;\n\n      for (var j = 0; j < selectOptions.length; ++j) {\n        var option = selectOptions[j];\n        var allowedEmpty = options.empty && !option.value;\n        var hasValue = option.value || allowedEmpty;\n\n        if (option.selected && hasValue) {\n          isSelectedOptions = true; // If using a hash serializer be sure to add the\n          // correct notation for an array in the multi-select\n          // context. Here the name attribute on the select element\n          // might be missing the trailing bracket pair. Both names\n          // \"foo\" and \"foo[]\" should be arrays.\n\n          if (options.hash && key.slice(key.length - 2) !== '[]') {\n            result = serializer(result, key + '[]', option.value);\n          } else {\n            result = serializer(result, key, option.value);\n          }\n        }\n      } // Serialize if no selected options and options.empty is true\n\n\n      if (!isSelectedOptions && options.empty) {\n        result = serializer(result, key, '');\n      }\n\n      continue;\n    }\n\n    result = serializer(result, key, val);\n  } // Check for all empty radio buttons and serialize them with key=\"\"\n\n\n  if (options.empty) {\n    for (var key in radio_store) {\n      if (!radio_store[key]) {\n        result = serializer(result, key, '');\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction parse_keys(string) {\n  var keys = [];\n  var prefix = /^([^\\[\\]]*)/;\n  var children = new RegExp(brackets);\n  var match = prefix.exec(string);\n\n  if (match[1]) {\n    keys.push(match[1]);\n  }\n\n  while ((match = children.exec(string)) !== null) {\n    keys.push(match[1]);\n  }\n\n  return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n  if (keys.length === 0) {\n    result = value;\n    return result;\n  }\n\n  var key = keys.shift();\n  var between = key.match(/^\\[(.+?)\\]$/);\n\n  if (key === '[]') {\n    result = result || [];\n\n    if (Array.isArray(result)) {\n      result.push(hash_assign(null, keys, value));\n    } else {\n      // This might be the result of bad name attributes like \"[][foo]\",\n      // in this case the original `result` object will already be\n      // assigned to an object literal. Rather than coerce the object to\n      // an array, or cause an exception the attribute \"_values\" is\n      // assigned as an array.\n      result._values = result._values || [];\n\n      result._values.push(hash_assign(null, keys, value));\n    }\n\n    return result;\n  } // Key is an attribute name and can be assigned directly.\n\n\n  if (!between) {\n    result[key] = hash_assign(result[key], keys, value);\n  } else {\n    var string = between[1]; // +var converts the variable into a number\n    // better than parseInt because it doesn't truncate away trailing\n    // letters and actually fails if whole thing is not a number\n\n    var index = +string; // If the characters between the brackets is not a number it is an\n    // attribute name and can be assigned directly.\n\n    if (isNaN(index)) {\n      result = result || {};\n      result[string] = hash_assign(result[string], keys, value);\n    } else {\n      result = result || [];\n      result[index] = hash_assign(result[index], keys, value);\n    }\n  }\n\n  return result;\n} // Object/hash encoding serializer.\n\n\nfunction hash_serializer(result, key, value) {\n  var matches = key.match(brackets); // Has brackets? Use the recursive assignment function to walk the keys,\n  // construct any missing objects in the result tree and make the assignment\n  // at the end of the chain.\n\n  if (matches) {\n    var keys = parse_keys(key);\n    hash_assign(result, keys, value);\n  } else {\n    // Non bracket notation can make assignments directly.\n    var existing = result[key]; // If the value has been assigned already (for instance when a radio and\n    // a checkbox have the same name attribute) convert the previous value\n    // into an array before pushing into it.\n    //\n    // NOTE: If this requirement were removed all hash creation and\n    // assignment could go through `hash_assign`.\n\n    if (existing) {\n      if (!Array.isArray(existing)) {\n        result[key] = [existing];\n      }\n\n      result[key].push(value);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n} // urlform encoding serializer\n\n\nfunction str_serialize(result, key, value) {\n  // encode newlines as \\r\\n cause the html spec says so\n  value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n  value = encodeURIComponent(value); // spaces should be '+' rather than '%20'.\n\n  value = value.replace(/%20/g, '+');\n  return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;","import React, { Component } from 'react';\r\nimport {Paper , Grid , TextField, MenuItem, Button, Typography} from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport formSerialize from 'form-serialize';\r\nimport { connect } from 'react-redux';\r\nimport  * as actions from '../../store/actions/inventoryActions';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\n\r\nconst styles = theme =>({\r\n  root:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    padding:'5',\r\n    boxSizing:'border-box'\r\n  },\r\n  textField:{\r\n    marginRight:theme.spacing.unit,\r\n    marginLeft:theme.spacing.unit\r\n  },\r\n  button:{\r\n    marginRight:theme.spacing.unit,\r\n    marginLeft:theme.spacing.unit,\r\n    marginBottom:theme.spacing.unit\r\n  },\r\n  menu:{\r\n    width:200\r\n  }\r\n})\r\nconst units=['Oz','Kg','Units','Lbs']\r\nconst categories=['utensils','fruit','vegetables','cereal','meat','grain','liquid','spice','equipment']\r\nclass AddInventory extends Component {\r\n  state={\r\n    unit:units[0],\r\n    category:categories[0]\r\n  }\r\n  componentDidUpdate(){\r\n    if(this.props.addInventorySuccess) {\r\n      this.props.onAddInventoryComplete()\r\n      this.props.history.push('/inventory')\r\n    }\r\n\r\n  }\r\n\r\n  handleUnitChange= (event) =>{\r\n    this.setState({\r\n      unit:event.target.value\r\n    })\r\n    //console.log(this.state.unit)\r\n  }\r\n  handleCategoryChange= (category)=>{\r\n    this.setState({\r\n      category:category\r\n    })\r\n  }\r\n  submitHandler = (event) =>{\r\n    event.preventDefault();\r\n    let form =document.getElementById('inventory');\r\n    let inventoryData= formSerialize(form,{hash:true})\r\n    inventoryData={...inventoryData,userId:this.props.auth.localId}\r\n    this.props.onSubmitForm(inventoryData,this.props.auth.idToken)\r\n  }\r\n\r\n  render() {\r\n\r\n    const { classes }=this.props\r\n    const formDisplay=(<React.Fragment>\r\n      <Typography variant=\"h3\"\r\n                  gutterBottom\r\n                  color=\"secondary\"\r\n                  align=\"center\"\r\n                  >Add Inventory</Typography>\r\n                <form id='inventory' action=\"\" className={classes.root} onSubmit={(event)=>this.submitHandler(event)}>\r\n        <TextField\r\n        required\r\n        className={classes.textField}\r\n        label='Item Name'\r\n        id='itemName'\r\n        name='item_name'\r\n        placeholder='Item Name'\r\n        fullWidth={true}\r\n        margin='normal'\r\n        variant=\"outlined\"\r\n        />\r\n        <TextField\r\n        required\r\n        name='quantity'\r\n        className={classes.textField}\r\n        label='Quantity'\r\n        id='quantity'\r\n        placeholder='Item Quantity'\r\n        fullWidth={true}\r\n        margin='normal'\r\n        variant=\"outlined\"\r\n        />\r\n        <TextField\r\n        required\r\n        name='unit'\r\n        className={classes.textField}\r\n        select\r\n        label='Select'\r\n        fullWidth={true}\r\n        margin='normal'\r\n        value={this.state.unit}\r\n        SelectProps={{\r\n          MenuProps:{\r\n            className:classes.menu\r\n          }\r\n        }}\r\n        helperText=\"Please select your currency\"\r\n        variant=\"outlined\"\r\n        onChange={(event)=>this.handleUnitChange(event)}\r\n        >\r\n        {units.map(unit=>{\r\n          return(<MenuItem key={unit} value={unit}>\r\n                  {unit}\r\n                  </MenuItem>)\r\n        })}\r\n        </TextField>\r\n        <TextField\r\n        required\r\n        name='category'\r\n        className={classes.textField}\r\n        select\r\n        label='Select'\r\n        fullWidth={true}\r\n        margin='normal'\r\n        value={this.state.category}\r\n        SelectProps={{\r\n          MenuProps:{\r\n            className:classes.menu\r\n          }\r\n        }}\r\n        helperText=\"Please select category\"\r\n        variant=\"outlined\"\r\n        onChange={(event)=>this.handleCategoryChange(event.target.value)}\r\n        >\r\n        {categories.map(category=>{\r\n          return(<MenuItem key={category} value={category}>\r\n                  {category}\r\n                  </MenuItem>)\r\n        })}\r\n        </TextField>\r\n        <TextField\r\n        name='image_url'\r\n        className={classes.textField}\r\n        label='Image Url'\r\n        placeholder='Image Url'\r\n        margin='normal'\r\n        fullWidth={true}\r\n        variant=\"outlined\"\r\n        />\r\n        <Button\r\n          type='submit'\r\n          className={classes.button}\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          fullWidth={true}\r\n          >Submit</Button>\r\n      </form>\r\n    </React.Fragment>)\r\n    let form_data=formDisplay\r\n    if(this.props.addInventory){\r\n      form_data=<Spinner/>\r\n    }\r\n    if (this.props.addInventorySuccess){\r\n      form_data=(<React.Fragment>\r\n        {formDisplay}\r\n        </React.Fragment>);\r\n\r\n    }\r\n    if(this.props.addInventoryFail){\r\n      form_data=(<React.Fragment>\r\n        <Typography variant='h5' color='error'>An Error occured while submitting the form</Typography>\r\n        {formDisplay}\r\n      </React.Fragment>)\r\n    }\r\n    //console.log(this.props.match)\r\n    return (\r\n        <Grid item\r\n          xs={12}\r\n          sm={6}\r\n          >\r\n            <Paper square={true}\r\n            color=\"secondary\">\r\n                {form_data}\r\n            </Paper>\r\n          </Grid>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps= state=>({\r\n  addInventory:state.inventory.addInventory,\r\n  addInventoryFail:state.inventory.addInventoryFail,\r\n  addInventorySuccess:state.inventory.addInventorySuccess,\r\n  auth:state.auth\r\n})\r\nconst mapDispatchToProps = dispatch =>({\r\n  onSubmitForm: (data,idToken)=>dispatch(actions.addInventory(data,idToken)),\r\n  onAddInventoryComplete: ()=> dispatch(actions.addInventoryComplete())\r\n})\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(AddInventory));\r\n"],"sourceRoot":""}