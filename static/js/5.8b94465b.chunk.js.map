{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","../node_modules/form-serialize/index.js","Utils/Utility.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1__","_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1___default","spinner","a","createElement","className","classes","Loader","module","exports","load2","k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","key","value","match","hash_assign","keys","length","shift","between","Array","isArray","push","_values","string","index","isNaN","children","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","form","options","hash","undefined","serializer","elements","radio_store","Object","create","i","element","disabled","name","test","nodeName","type","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice","hasError","validity","valid","valueMissing","typeMismatch","tooShort","patternMismatch","showError","errorStatus","classList","add","setAttribute","id","message","document","getElementById","textContent","parentElement","insertAdjacentHTML","concat","removeError","remove","removeAttribute","parentNode","removeChild","email","password","Auth","state","isSignUp","validityChecker","e","target","switchAuthModeHandler","_this","setState","submitAuthForm","event","preventDefault","querySelector","formData","formSerialize","authData","objectSpread","returnSecureToken","console","log","checkValidity","inputs","from","querySelectorAll","_arr","_i","input","_arr2","_i2","focus","props","onSubmitForm","window","addEventListener","this","prevProps","prevState","_this2","react_default","noValidate","onSubmit","index_es","textField","contains","root","error","required","label","placeholder","autoComplete","fullWidth","margin","inputProps","pattern","variant","minLength","size","color","button","text","align","onClick","formDisplay","loading","Spinner","Fragment","isAuthenticated","react_router","to","item","xs","sm","md","gutterBottom","Component","connect","auth","idToken","dispatch","actions","withStyles","theme","width","display","flexWrap","padding","boxSizing","marginRight","spacing","unit","marginLeft","marginBottom","boxShadow","palette"],"mappings":"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","file":"static/js/5.8b94465b.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__Kn1Z5\",\"load2\":\"Spinner_load2__otO50\"};","// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i; // node names which could be successful controls\n\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i; // Matches bracket notation.\n\nvar brackets = /(\\[[^\\[\\]]*\\])/g; // serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\n\nfunction serialize(form, options) {\n  if (typeof options != 'object') {\n    options = {\n      hash: !!options\n    };\n  } else if (options.hash === undefined) {\n    options.hash = true;\n  }\n\n  var result = options.hash ? {} : '';\n  var serializer = options.serializer || (options.hash ? hash_serializer : str_serialize);\n  var elements = form && form.elements ? form.elements : []; //Object store each radio and set if it's empty or not\n\n  var radio_store = Object.create(null);\n\n  for (var i = 0; i < elements.length; ++i) {\n    var element = elements[i]; // ingore disabled fields\n\n    if (!options.disabled && element.disabled || !element.name) {\n      continue;\n    } // ignore anyhting that is not considered a success field\n\n\n    if (!k_r_success_contrls.test(element.nodeName) || k_r_submitter.test(element.type)) {\n      continue;\n    }\n\n    var key = element.name;\n    var val = element.value; // we can't just use element.value for checkboxes cause some browsers lie to us\n    // they say \"on\" for value when the box isn't checked\n\n    if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n      val = undefined;\n    } // If we want empty elements\n\n\n    if (options.empty) {\n      // for checkbox\n      if (element.type === 'checkbox' && !element.checked) {\n        val = '';\n      } // for radio\n\n\n      if (element.type === 'radio') {\n        if (!radio_store[element.name] && !element.checked) {\n          radio_store[element.name] = false;\n        } else if (element.checked) {\n          radio_store[element.name] = true;\n        }\n      } // if options empty is true, continue only if its radio\n\n\n      if (val == undefined && element.type == 'radio') {\n        continue;\n      }\n    } else {\n      // value-less fields are ignored unless options.empty is true\n      if (!val) {\n        continue;\n      }\n    } // multi select boxes\n\n\n    if (element.type === 'select-multiple') {\n      val = [];\n      var selectOptions = element.options;\n      var isSelectedOptions = false;\n\n      for (var j = 0; j < selectOptions.length; ++j) {\n        var option = selectOptions[j];\n        var allowedEmpty = options.empty && !option.value;\n        var hasValue = option.value || allowedEmpty;\n\n        if (option.selected && hasValue) {\n          isSelectedOptions = true; // If using a hash serializer be sure to add the\n          // correct notation for an array in the multi-select\n          // context. Here the name attribute on the select element\n          // might be missing the trailing bracket pair. Both names\n          // \"foo\" and \"foo[]\" should be arrays.\n\n          if (options.hash && key.slice(key.length - 2) !== '[]') {\n            result = serializer(result, key + '[]', option.value);\n          } else {\n            result = serializer(result, key, option.value);\n          }\n        }\n      } // Serialize if no selected options and options.empty is true\n\n\n      if (!isSelectedOptions && options.empty) {\n        result = serializer(result, key, '');\n      }\n\n      continue;\n    }\n\n    result = serializer(result, key, val);\n  } // Check for all empty radio buttons and serialize them with key=\"\"\n\n\n  if (options.empty) {\n    for (var key in radio_store) {\n      if (!radio_store[key]) {\n        result = serializer(result, key, '');\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction parse_keys(string) {\n  var keys = [];\n  var prefix = /^([^\\[\\]]*)/;\n  var children = new RegExp(brackets);\n  var match = prefix.exec(string);\n\n  if (match[1]) {\n    keys.push(match[1]);\n  }\n\n  while ((match = children.exec(string)) !== null) {\n    keys.push(match[1]);\n  }\n\n  return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n  if (keys.length === 0) {\n    result = value;\n    return result;\n  }\n\n  var key = keys.shift();\n  var between = key.match(/^\\[(.+?)\\]$/);\n\n  if (key === '[]') {\n    result = result || [];\n\n    if (Array.isArray(result)) {\n      result.push(hash_assign(null, keys, value));\n    } else {\n      // This might be the result of bad name attributes like \"[][foo]\",\n      // in this case the original `result` object will already be\n      // assigned to an object literal. Rather than coerce the object to\n      // an array, or cause an exception the attribute \"_values\" is\n      // assigned as an array.\n      result._values = result._values || [];\n\n      result._values.push(hash_assign(null, keys, value));\n    }\n\n    return result;\n  } // Key is an attribute name and can be assigned directly.\n\n\n  if (!between) {\n    result[key] = hash_assign(result[key], keys, value);\n  } else {\n    var string = between[1]; // +var converts the variable into a number\n    // better than parseInt because it doesn't truncate away trailing\n    // letters and actually fails if whole thing is not a number\n\n    var index = +string; // If the characters between the brackets is not a number it is an\n    // attribute name and can be assigned directly.\n\n    if (isNaN(index)) {\n      result = result || {};\n      result[string] = hash_assign(result[string], keys, value);\n    } else {\n      result = result || [];\n      result[index] = hash_assign(result[index], keys, value);\n    }\n  }\n\n  return result;\n} // Object/hash encoding serializer.\n\n\nfunction hash_serializer(result, key, value) {\n  var matches = key.match(brackets); // Has brackets? Use the recursive assignment function to walk the keys,\n  // construct any missing objects in the result tree and make the assignment\n  // at the end of the chain.\n\n  if (matches) {\n    var keys = parse_keys(key);\n    hash_assign(result, keys, value);\n  } else {\n    // Non bracket notation can make assignments directly.\n    var existing = result[key]; // If the value has been assigned already (for instance when a radio and\n    // a checkbox have the same name attribute) convert the previous value\n    // into an array before pushing into it.\n    //\n    // NOTE: If this requirement were removed all hash creation and\n    // assignment could go through `hash_assign`.\n\n    if (existing) {\n      if (!Array.isArray(existing)) {\n        result[key] = [existing];\n      }\n\n      result[key].push(value);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n} // urlform encoding serializer\n\n\nfunction str_serialize(result, key, value) {\n  // encode newlines as \\r\\n cause the html spec says so\n  value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n  value = encodeURIComponent(value); // spaces should be '+' rather than '%20'.\n\n  value = value.replace(/%20/g, '+');\n  return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;","\r\n  export const  hasError=(element)=>{\r\n    if(element.disabled || element.type === 'file' || element.type === 'reset' || element.type === 'submit' || element.type === 'button') return null\r\n    let validity=element.validity\r\n    if(validity.valid) return null\r\n    if(validity.valueMissing) return 'Please fill in this field'\r\n    if(element.type==='email'){\r\n      if(validity.typeMismatch) return 'Please enter an email address'\r\n    }\r\n    if(validity.tooShort) return 'Password should be atleast 8 chracters long'\r\n    if(validity.patternMismatch) {\r\n      return 'Please enter a valid email address'}\r\n    return null\r\n  }\r\n\r\n  export const  showError=(element,errorStatus)=>{\r\n      element.classList.add('error')\r\n      element.setAttribute('aria-describedby','errorMessagefor'+element.id)\r\n      let message=document.getElementById('errorMessagefor'+element.id)\r\n      if(message)  message.textContent=errorStatus\r\n      if(!message){\r\n        element.parentElement.insertAdjacentHTML('afterend',`<p class=\"errorText\" id=\"errorMessagefor${element.id}\">${errorStatus}</p>`)\r\n      }\r\n  }\r\n  export const  removeError=(element)=>{\r\n      element.classList.remove('error')\r\n      element.removeAttribute('aria-describedby')\r\n      let message=document.getElementById('errorMessagefor'+element.id)\r\n      if(message) message.parentNode.removeChild(message)\r\n  }\r\n","import React, { Component } from 'react';\r\nimport formSerialize from 'form-serialize';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Grid, Typography, TextField, Button} from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport * as actions from '../../store/actions/authActions';\r\nimport { connect } from 'react-redux';\r\nimport { hasError, showError, removeError} from '../../Utils/Utility';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nconst styles= theme =>({\r\n  form:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    padding:'5px',\r\n    boxSizing:'border-box'\r\n  },\r\n   textField:{\r\n      marginRight:theme.spacing.unit,\r\n      marginLeft:theme.spacing.unit\r\n    },\r\n    button:{\r\n      marginRight:theme.spacing.unit,\r\n      marginLeft:theme.spacing.unit,\r\n      marginBottom:theme.spacing.unit\r\n    },\r\n    text:{\r\n      marginLeft:'auto',\r\n      marginRight:'auto'\r\n    },\r\n    error:{\r\n      boxShadow:`0px 8px 15px ${theme.palette.error}`\r\n    }\r\n})\r\nconst emailPattern=`^([a-zA-Z0-9_\\\\-\\\\.]+)@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.)|(([a-zA-Z0-9\\\\-]+\\\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\\\]?)$`\r\n\r\nlet email=null,password=null\r\n class Auth extends Component {\r\n   state={\r\n     isSignUp:false\r\n\r\n   }\r\n\r\n   componentDidMount() {\r\n     window.addEventListener('DOMContentLoaded',function(){\r\n       document.addEventListener('blur',this.validityChecker,true)\r\n     })\r\n   }\r\n   validityChecker= (e) =>{\r\n     let errorStatus=hasError(e.target)\r\n     if(errorStatus) showError(e.target,errorStatus)\r\n     if(!errorStatus) removeError(e.target)\r\n   }\r\n   componentDidUpdate(prevProps,prevState){\r\n     email=document.getElementById('email');\r\n     password=document.getElementById('password');\r\n     if(prevState.isSignUp!==this.state.isSignUp) document.addEventListener('blur',this.validityChecker,true)\r\n\r\n   }\r\n   switchAuthModeHandler =() =>{\r\n       this.setState(state=>({\r\n         isSignUp:!state.isSignUp\r\n     }))\r\n   }\r\n\r\n   submitAuthForm = (event) =>{\r\n     event.preventDefault();\r\n     let form=document.querySelector('form');\r\n     let formData=formSerialize(form,{hash:true})\r\n     let authData={...formData,returnSecureToken:true}\r\n     console.log(authData)\r\n     if(!form.checkValidity()){\r\n       let inputs =Array.from(document.querySelectorAll('input'))\r\n       for(let input of inputs){\r\n         let errorStatus=hasError(input)\r\n         if(errorStatus) showError(input,errorStatus)\r\n         if(!errorStatus) removeError(input)\r\n       }\r\n       for(let input of inputs ){\r\n         if(hasError(input)) {\r\n           input.focus()\r\n           break;\r\n         }\r\n       }\r\n     }\r\n     if(form.checkValidity()) this.props.onSubmitForm(authData,this.state.isSignUp)\r\n   }\r\n   render(){\r\n     const { classes } = this.props\r\n     const form=(\r\n       <form className={classes.form} noValidate={true} onSubmit={(event)=> this.submitAuthForm(event)}>\r\n           <TextField\r\n             className={classes.textField}\r\n             classes={email?email.classList.contains('error')?{root:classes.error}:{root:''}:{}}\r\n             required\r\n             label='Email'\r\n             name='email'\r\n             id='email'\r\n             type='email'\r\n             placeholder=\"example@gmail.com\"\r\n             autoComplete='email'\r\n             fullWidth={true}\r\n             margin='normal'\r\n             inputProps={{\r\n               pattern:emailPattern\r\n             }}\r\n             variant='outlined'/>\r\n\r\n             <TextField\r\n               className={classes.textField}\r\n               classes={password?password.classList.contains('error')?{root:classes.error}:{root:''}:{}}\r\n               required\r\n               type='password'\r\n               label='Password'\r\n               name='password'\r\n               id='password'\r\n               placeholder=\"Password\"\r\n               autoComplete='password'\r\n               fullWidth={true}\r\n               margin='normal'\r\n               inputProps={{\r\n                 minLength:8\r\n               }}\r\n               variant='outlined'/>\r\n\r\n               <Button\r\n\r\n                  type='submit'\r\n                  size='large'\r\n                  color='secondary'\r\n                  className={classes.button}\r\n                  variant='contained'\r\n                  fullWidth={true}>{this.state.isSignUp?'Sign Up':'Login'}</Button>\r\n                  <Typography\r\n                    className={classes.text}\r\n                    align='center'\r\n                    variant='body1'\r\n                    >\r\n                    {this.state.isSignUp? 'Already a member?':'Not a member?'}\r\n                    <Button\r\n                      className={classes.button}\r\n                      onClick={()=> this.switchAuthModeHandler()}\r\n                      size='small'\r\n                      color='secondary'\r\n                      variant='outlined'>\r\n                      {this.state.isSignUp?'Login':'Signup'}\r\n                    </Button></Typography>\r\n              </form>\r\n\r\n     )\r\n     let formDisplay=form\r\n     if(this.props.loading){\r\n       formDisplay=<Spinner/>\r\n     }\r\n     if(this.props.error){\r\n       formDisplay=(<React.Fragment><Typography align='center'>{this.props.error}</Typography>{form}</React.Fragment>)\r\n     }\r\n     return (\r\n       <React.Fragment>\r\n         {this.props.isAuthenticated?<Redirect to='/inventory'/>:''}\r\n       <Grid item\r\n         xs={12}\r\n         sm={6}\r\n         md={6}>\r\n\r\n           <Typography  variant='h3'\r\n             color='secondary'\r\n             align=\"center\"\r\n             className={classes.text}\r\n             gutterBottom>{this.state.isSignUp?\"Hello, you're welcome\":\"Welcome Back\"}</Typography>\r\n            {formDisplay}\r\n       </Grid>\r\n     </React.Fragment>\r\n     )\r\n   }\r\n }\r\n const mapStateToProps = state=>({\r\n   loading:state.auth.loading,\r\n   error:state.auth.error,\r\n   isAuthenticated:state.auth.idToken!==null\r\n })\r\n const mapDispatchToProps= dispatch=>({\r\n   onSubmitForm:(authData,isSignUp)=> dispatch(actions.auth(authData,isSignUp))\r\n })\r\n export default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(Auth));\r\n"],"sourceRoot":""}